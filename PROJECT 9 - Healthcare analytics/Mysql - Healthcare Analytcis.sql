CREATE DATABASE HEALTHCARE_ANALYTICS;


USE HEALTHCARE_ANALYTICS;


CREATE TABLE PATIENTS(
	PATIENT_ID INT AUTO_INCREMENT PRIMARY KEY,
	NAME VARCHAR(20) NOT NULL,
	AGE INT NOT NULL,
	GENDER VARCHAR(20) NOT NULL,
	ADDRESS VARCHAR(50) NOT NULL,
	CONTACT_NUMBER VARCHAR(15) NOT NULL
);


DESC PATIENTS;


CREATE TABLE DOCTORS(
	DOCTOR_ID INT AUTO_INCREMENT PRIMARY KEY,
	NAME VARCHAR(50) NOT NULL,
	SPECIALIZATION VARCHAR(50) NOT NULL,
	EXPERIENCE_YEAR INT NOT NULL,
	CONTACT_NUMBER VARCHAR(15) NOT NULL
);


CREATE TABLE APPOINMENTS(
	APPOINTMENT_ID INT AUTO_INCREMENT,
	PATIENT_ID INT NOT NULL,
	DOCTOR_ID INT NOT NULL,
	APPOINTMENT_DATE DATE NOT NULL,
	REASON VARCHAR(50) NOT NULL,
	STATUS VARCHAR(50) NOT NULL,
PRIMARY KEY (APPOINTMENT_ID, PATIENT_ID),
FOREIGN KEY (PATIENT_ID) REFERENCES PATIENTS(PATIENT_ID) ON DELETE CASCADE,
FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID)
);


CREATE TABLE DIAGNOSIS (
	DIAGNOSIS_ID INT AUTO_INCREMENT,
	PATIENT_ID INT NOT NULL,
	DOCTOR_ID INT NOT NULL,
	APPOINTMENT_ID INT NOT NULL,
	DIAGNOSIS_DATE DATE NOT NULL,
	DIAGNOSIS VARCHAR(50) NOT NULL,
	TREATMENT VARCHAR(50) NOT NULL,
PRIMARY KEY (DIAGNOSIS_ID, PATIENT_ID, APPOINTMENT_ID),
FOREIGN KEY (PATIENT_ID) REFERENCES PATIENTS(PATIENT_ID) ON DELETE CASCADE,
FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID) ON DELETE CASCADE,
FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINMENTS(APPOINTMENT_ID) ON DELETE CASCADE
);


CREATE TABLE MEDICATIONS(
	MEDICATION_ID INT AUTO_INCREMENT,
	DIAGNOSIS_ID INT NOT NULL,
	MEDICATION VARCHAR(50) NOT NULL,
	DOSAGE VARCHAR(50) NOT NULL,
	START_DATE DATE NOT NULL,
	END_DATE DATE NOT NULL,
PRIMARY KEY ( MEDICATION_ID ,DIAGNOSIS_ID),
FOREIGN KEY (DIAGNOSIS_ID) REFERENCES DIAGNOSIS(DIAGNOSIS_ID) ON DELETE CASCADE
);


DESC PATIENTS;
DESC DOCTORS;
DESC  APPOINMENTS;
DESC DIAGNOSIS;
DESC MEDICATIONS;


DROP TABLE MEDICATIONS;

SELECT * FROM  PATIENTS;
SELECT * FROM DOCTORS;
SELECT * FROM   APPOINMENTS;
SELECT * FROM  DIAGNOSIS;
SELECT * FROM MEDICATIONS;


CREATE TABLE MEDICATIONS (
    MEDICATION_ID INT AUTO_INCREMENT PRIMARY KEY,
    DIAGNOSIS_ID INT NOT NULL,
    MEDICATION VARCHAR(50) NOT NULL,
    DOSAGE VARCHAR(50) NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    FOREIGN KEY (DIAGNOSIS_ID) REFERENCES DIAGNOSIS(DIAGNOSIS_ID) ON DELETE CASCADE,
    CHECK (END_DATE > START_DATE) 
);


CREATE TABLE MEDICATIONS (
    MEDICATION_ID INT AUTO_INCREMENT PRIMARY KEY,
    DIAGNOSIS_ID INT NOT NULL,
    MEDICATION VARCHAR(50) NOT NULL,
    DOSAGE VARCHAR(50) NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    FOREIGN KEY (DIAGNOSIS_ID) REFERENCES DIAGNOSIS(DIAGNOSIS_ID) ON DELETE CASCADE
);


ALTER TABLE DIAGNOSIS 
DROP FOREIGN KEY diagnosis_ibfk_3, 
DROP COLUMN APPOINTMENT_ID;       


ALTER TABLE DIAGNOSIS 
DROP PRIMARY KEY, 
ADD PRIMARY KEY (DIAGNOSIS_ID, PATIENT_ID);


TRUNCATE TABLE MEDICATIONS;
 
 
SELECT d.DIAGNOSIS_ID, d.PATIENT_ID, d.DOCTOR_ID, a.APPOINTMENT_ID, d.DIAGNOSIS_DATE, d.DIAGNOSIS, d.TREATMENT
FROM DIAGNOSIS d
JOIN APPOINMENTS a 
ON d.PATIENT_ID = a.PATIENT_ID AND d.DOCTOR_ID = a.DOCTOR_ID
AND d.DIAGNOSIS_DATE = a.APPOINTMENT_DATE;


ALTER TABLE DIAGNOSIS 
ADD COLUMN APPOINTMENT_ID INT NULL;


SET SQL_SAFE_UPDATES = 0;


SET SQL_SAFE_UPDATES = 1;


UPDATE DIAGNOSIS d
LEFT JOIN APPOINMENTS a
ON d.PATIENT_ID = a.PATIENT_ID
AND d.DOCTOR_ID = a.DOCTOR_ID
AND d.DIAGNOSIS_DATE = a.APPOINTMENT_DATE
SET d.APPOINTMENT_ID = a.APPOINTMENT_ID;


ALTER TABLE DIAGNOSIS 
ADD CONSTRAINT fk_appointment 
FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINMENTS(APPOINTMENT_ID) 
ON DELETE SET NULL;


-- Inner and Equi Joins--
SELECT 
	PATIENTS.NAME AS PATIENT_NAME,
	DOCTORS.NAME AS DOCTOR_NAME,
	DOCTORS.SPECIALIZATION
FROM 
	APPOINMENTS
	INNER JOIN PATIENTS ON APPOINMENTS.PATIENT_ID=PATIENTS.PATIENT_ID
	INNER JOIN DOCTORS ON APPOINMENTS.DOCTOR_ID=DOCTORS.DOCTOR_ID
WHERE
	APPOINMENTS.STATUS='COMPLETED';


-- Left Join with Null Handling --
SELECT
	PATIENTS.NAME AS PATIENT_NAME,
	PATIENTS.CONTACT_NUMBER,
	PATIENTS.ADDRESS
FROM
	PATIENTS 
	LEFT JOIN APPOINMENTS ON PATIENTS.PATIENT_ID=APPOINMENTS.PATIENT_ID
WHERE
	APPOINMENTS.APPOINTMENT_ID IS NULL;


-- Right Join and Aggregate Functions--
SELECT
	d.NAME AS DOCTOR_NAME,
	d.SPECIALIZATION,
	COALESCE(COUNT(di.DIAGNOSIS_ID), 0) AS TOTAL_DIAGNOSIS
FROM
	DIAGNOSIS di
	RIGHT JOIN DOCTORS d ON di.DOCTOR_ID = d.DOCTOR_ID
GROUP BY d.DOCTOR_ID, d.NAME, d.SPECIALIZATION
ORDER BY TOTAL_DIAGNOSIS DESC;


-- Full Join for Overlapping Data--
SELECT 
    A.APPOINTMENT_ID, 
    A.PATIENT_ID, 
    P.NAME AS PATIENT_NAME,
    A.DOCTOR_ID, 
    D.NAME AS DOCTOR_NAME,
    A.APPOINTMENT_DATE, 
    A.REASON, 
    DIAG.DIAGNOSIS_ID, 
    DIAG.DIAGNOSIS_DATE, 
    DIAG.DIAGNOSIS, 
    DIAG.TREATMENT
FROM APPOINMENTS A
LEFT JOIN DIAGNOSIS DIAG 
    ON A.PATIENT_ID = DIAG.PATIENT_ID 
    AND A.DOCTOR_ID = DIAG.DOCTOR_ID 
    AND A.APPOINTMENT_DATE = DIAG.DIAGNOSIS_DATE
LEFT JOIN PATIENTS P ON A.PATIENT_ID = P.PATIENT_ID
LEFT JOIN DOCTORS D ON A.DOCTOR_ID = D.DOCTOR_ID
UNION 
SELECT 
    NULL AS APPOINTMENT_ID,  
    DIAG.PATIENT_ID, 
    P.NAME AS PATIENT_NAME,
    DIAG.DOCTOR_ID, 
    D.NAME AS DOCTOR_NAME,
    NULL AS APPOINTMENT_DATE, 
    NULL AS REASON, 
    DIAG.DIAGNOSIS_ID, 
    DIAG.DIAGNOSIS_DATE, 
    DIAG.DIAGNOSIS, 
    DIAG.TREATMENT
FROM DIAGNOSIS DIAG
LEFT JOIN PATIENTS P ON DIAG.PATIENT_ID = P.PATIENT_ID
LEFT JOIN DOCTORS D ON DIAG.DOCTOR_ID = D.DOCTOR_ID
WHERE NOT EXISTS (
    SELECT 1 FROM APPOINMENTS A
    WHERE A.PATIENT_ID = DIAG.PATIENT_ID 
    AND A.DOCTOR_ID = DIAG.DOCTOR_ID 
    AND A.APPOINTMENT_DATE = DIAG.DIAGNOSIS_DATE
);


SELECT CONSTRAINT_NAME 
FROM information_schema.KEY_COLUMN_USAGE 
WHERE TABLE_NAME = 'DIAGNOSIS' 
AND COLUMN_NAME = 'APPOINTMENT_ID';


ALTER TABLE DIAGNOSIS DROP FOREIGN KEY fk_appointment;


ALTER TABLE DIAGNOSIS DROP COLUMN APPOINTMENT_ID;


ALTER TABLE DIAGNOSIS DROP PRIMARY KEY, ADD PRIMARY KEY (DIAGNOSIS_ID);


ALTER TABLE DIAGNOSIS 
ADD CONSTRAINT fk_patient FOREIGN KEY (PATIENT_ID) REFERENCES PATIENTS(PATIENT_ID) ON DELETE CASCADE,
ADD CONSTRAINT fk_doctor FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID) ON DELETE CASCADE;


DESC diagnosis;


-- Window Functions (Ranking and Aggregation) --
SELECT 
    doctor_id,
    COUNT(appointment_id) AS total_appointments
FROM Appoinments
GROUP BY doctor_id
ORDER BY total_appointments DESC;

SELECT 
    doctor_id,
    total_appointments,
    DENSE_RANK() OVER (
        ORDER BY total_appointments DESC
    ) AS rank_position
FROM (
    SELECT 
        doctor_id,
        COUNT(appointment_id) AS total_appointments
    FROM Appoinments
    GROUP BY doctor_id
) AS doctor_counts 
ORDER BY rank_position;


-- Conditional Expressions --
SELECT 
    CASE 
        WHEN age BETWEEN 18 AND 30 THEN '18-30'
        WHEN age BETWEEN 31 AND 50 THEN '31-50'
        WHEN age >= 51 THEN '51+'
        ELSE 'Unknown'  -- Handles NULL or invalid ages
    END AS age_group,
    COUNT(*) AS patient_count
FROM Patients
GROUP BY age_group
ORDER BY age_group;


-- Numeric and String Functions --
SELECT
	UPPER(NAME) AS UPPERCASE_NAME,
	CONTACT_NUMBER
FROM PATIENTS
WHERE CONTACT_NUMBER LIKE '%1234';


-- Subqueries for Filtering --
SELECT p.PATIENT_ID, p.NAME
FROM PATIENTS p
JOIN DIAGNOSIS d ON p.PATIENT_ID = d.PATIENT_ID
JOIN MEDICATIONS m ON d.DIAGNOSIS_ID = m.DIAGNOSIS_ID
GROUP BY p.PATIENT_ID, p.NAME
HAVING COUNT(DISTINCT m.MEDICATION) = 1 AND MAX(m.MEDICATION) = 'Insulin';


-- Date and Time Functions --
SELECT 
	DIAGNOSIS_ID,
    AVG(DATEDIFF(END_DATE,START_DATE)) AS AVG_DURATION_DAYS
FROM MEDICATIONS
WHERE START_DATE IS NOT NULL
GROUP BY DIAGNOSIS_ID
ORDER BY AVG_DURATION_DAYS DESC;


-- Complex Joins and Aggregation --
SELECT
	D.DOCTOR_ID,
    D.NAME,
    D.SPECIALIZATION,
    COUNT(DISTINCT A.PATIENT_ID) AS UNIQUE_PATIETNTS_COUNT
FROM DOCTORS D
JOIN APPOINMENTS A ON D.DOCTOR_ID = A.DOCTOR_ID
GROUP BY D.DOCTOR_ID , D.NAME, D.SPECIALIZATION
ORDER BY COUNT(DISTINCT A.PATIENT_ID) DESC;









